name: CI/CD Pipeline

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v**'
  pull_request:
    branches:
      - '*'
env:
  POSTGRES_USER: rootuser
  POSTGRES_PASSWORD: changeme
  POSTGRES_DB: assessment-core
  SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/assessment-core
  SPRING_DATASOURCE_USERNAME: rootuser
  SPRING_DATASOURCE_PASSWORD: changeme
  SONAR_PROJECT_KEY: flickit-assessment
  REGISTRY: ghcr.io
  IMAGE_NAME: mahdirezazadeh/flickit-assessment
  JIB_OPT: -Djib.httpTimeout=240000 -Dmaven.test.skip=true
  JIB_CMD: clean install jib:build

jobs:
  build:
    runs-on: ubuntu-latest
#    here
    outputs:
      project_version: ${{ steps.project.outputs.version }}
#    to here

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: adopt

#    here

      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}

#    to here

      - name: Build with Maven
        run: mvn clean compile

  test:
    needs: [build]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: adopt

      - name: Run Tests
        run: mvn test

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

  sonar:
    needs: [test]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    outputs:
      project_version: ${{ steps.project.outputs.version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: adopt

      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}

  build-and-push-latest-image:
    needs: [sonar]
    name: deploy latest image
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        id: vars

      - name: Set output
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: mahdirezazadeh
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: adopt

      - name: Build and push image
        run: mvn ${{ env.JIB_OPT }} -Djib.to.image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" ${{ env.JIB_CMD }}

  darkube-deploy-latest:
    needs: [build-and-push-latest-image]
    name: darkube deploy latest
    container: hamravesh.hamdocker.ir/public/darkube-cli:v1.1
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
    steps:
      - name: Run script
        run: darkube deploy --ref main --token ${DARKUBE_DEPLOY_TOKEN} --app-id ${DARKUBE_APP_ID}  --image-tag "latest" --job-id "$GITHUB_RUN_ID" --stateless-app true
        env:
          DARKUBE_DEPLOY_TOKEN: ${{ secrets.ASSESSMENT_CORE_DEPLOY_TOKEN_STAGING }}
          DARKUBE_APP_ID: ${{ secrets.ASSESSMENT_CORE_APP_ID_STAGING }}

  tag-and-release:
    needs: [build]
    name: tag and release
    runs-on: ubuntu-latest
    if: ${{ contains( needs.build.outputs.project_version , 'SNAP-SHOT') }}
#    (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
#      github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true &&
#       contains( ${{ needs.build.outputs.project_version }} , 'SNAP-SHOT') }}

    permissions:
      contents: read
      packages: write
    steps:
      - name: tag and release
        id: release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.project_version }}
          release_name: v${{ needs.build.outputs.project_version }}
          draft: false
          prerelease: false

  build-and-push-image:
    needs: [tag-and-release]
    name: deploy image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      project_version: ${{ steps.project.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        id: vars

      - name: Set output
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: mahdirezazadeh
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: adopt

      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}

      - name: Build and push image
        if: v${{ steps.project.outputs.version }} == ${{ steps.vars.outputs.tag }}
        run: mvn ${{ env.JIB_OPT }} -Djib.to.image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.project.outputs.version }}" ${{ env.JIB_CMD }}

#  darkube-deploy:
#    needs: [build-and-push-image]
#    name: darkube deploy
#    container: hamravesh.hamdocker.ir/public/darkube-cli:v1.1
#    runs-on: ubuntu-latest
#    steps:
#      - name: Run script
#        run: darkube deploy --ref main --token ${DARKUBE_DEPLOY_TOKEN} --app-id ${DARKUBE_APP_ID}  --image-tag "${PROJECT_VERSION}" --job-id "$GITHUB_RUN_ID" --stateless-app true
#        env:
#          DARKUBE_DEPLOY_TOKEN: ${{ secrets.ASSESSMENT_CORE_DEPLOY_TOKEN_PROD }}
#          DARKUBE_APP_ID: ${{ secrets.ASSESSMENT_CORE_APP_ID_PROD }}
#          PROJECT_VERSION: ${{ needs.build-and-push-image.outputs.project_version }}
